%module{Slic3r::XS};

%{
#include <myinit.h>
#include "libslic3r/ExPolygonCollection.hpp"
%}

%name{Slic3r::ExPolygon::Collection} class ExPolygonCollection {
    ~ExPolygonCollection();
    Clone<ExPolygonCollection> clone() 
        %code{% RETVAL = THIS; %};
    void clear()
        %code{% THIS->expolygons.clear(); %};
    void scale(double factor);
    void translate(double x, double y);
    void rotate(double angle, Point* center)
        %code{% THIS->rotate(angle, *center); %};
    int count()
        %code{% RETVAL = THIS->expolygons.size(); %};
    bool contains_point(Point* point)
        %code{% RETVAL = THIS->contains(*point); %};
    bool contains_line(Line* line)
        %code{% RETVAL = THIS->contains(*line); %};
    bool contains_polyline(Polyline* polyline)
        %code{% RETVAL = THIS->contains(*polyline); %};
    void simplify(double tolerance);
    Polygons polygons()
        %code{% RETVAL = *THIS; %};
    Clone<Polygon> convex_hull();
%{

ExPolygonCollection*
ExPolygonCollection::new(...)
    CODE:
        RETVAL = new ExPolygonCollection ();
        // ST(0) is class name, others are expolygons
        RETVAL->expolygons.resize(items-1);
        for (unsigned int i = 1; i < items; i++) {
            // Note: a COPY of the input is stored
            RETVAL->expolygons[i-1].from_SV_check(ST(i));
        }
    OUTPUT:
        RETVAL

SV*
ExPolygonCollection::arrayref()
    CODE:
        AV* av = newAV();
        av_fill(av, THIS->expolygons.size()-1);
        int i = 0;
        for (ExPolygons::iterator it = THIS->expolygons.begin(); it != THIS->expolygons.end(); ++it) {
            av_store(av, i++, perl_to_SV_ref(*it));
        }
        RETVAL = newRV_noinc((SV*)av);
    OUTPUT:
        RETVAL

SV*
ExPolygonCollection::pp()
    CODE:
        AV* av = newAV();
        av_fill(av, THIS->expolygons.size()-1);
        int i = 0;
        for (ExPolygons::iterator it = THIS->expolygons.begin(); it != THIS->expolygons.end(); ++it) {
            av_store(av, i++, (*it).to_SV_pureperl());
        }
        RETVAL = newRV_noinc((SV*)av);
    OUTPUT:
        RETVAL

void
ExPolygonCollection::append(...)
    CODE:
        for (unsigned int i = 1; i < items; i++) {
            ExPolygon expolygon;
            expolygon.from_SV_check( ST(i) );
            THIS->expolygons.push_back(expolygon);
        }

%}
};
